const AUTOGENERATED_FILENAME_MAX_LENGTH = 50; // remember some windows systems have a max length of 255 chars for file path lengths.

function getObjectById(id, list) { // created by ChatGPT
    // Iterate over the list of objects
    for (let i = 0; i < list.length; i++) {
        const obj = list[i];

        // Check if the object has an `id` property that matches the given id
        if (obj.id && obj.id === id) {
            // If a match is found, return the object
            return obj;
        }
    }

    // If no match is found, return null
    return null;
}

function sliceString(str, num) { //created by ChatGPT
    // Check if the string is longer than num characters
    if (str.length > num) {
        return `${str.slice(0, num)}...`.replace(`<p>`, "").replace(`</p>`, "");
    }
    // If the string is not longer than num characters, return it as is
    return str;
}

function encode_string_as_blob(string)
{
	let bytes = new TextEncoder().encode(string);
	let blob = new Blob([bytes], {
		type: "application/json;charset=utf-8"
	});
	return blob;
}

// basially using the fileSaver.js, it's an IIFE to save on implementing the <a> singleton.
const download_blob_as_file = (function()
{
	let a = document.createElement("a");
	document.body.appendChild(a);
	a.style = "display: none";
	return function (blob, file_name)
	{
		let url = window.URL.createObjectURL(blob);
		a.href = url;
        a.download = file_name;
        a.click();
		window.URL.revokeObjectURL(url);
	}
})();

/* conversion functions for export and download */
function convert_thread_to_JSON_file(thread)
{
	let data = thread;
	let string = JSON.stringify(data);
	let blob = encode_string_as_blob(string);
	return blob;
}

function convert_thread_to_text_file(thread)
{
	let string = "Date:" + thread.date + " " + thread.time + "\n";
	let convo = thread.convo;
	for(let i = 0; i < convo.length; i++)
	{
		let speaker = i % 2 === 0 ? "Human" : "Assistant";
		string += speaker + ": " + convo[i] + "\n";
	}
	let blob = encode_string_as_blob(string);
	return blob;
}

// takes an object as data
function export_and_download_data_as_blob(data, filename = "file.txt")
{
	let string = JSON.stringify(data);
	let blob = encode_string_as_blob(string);
	download_blob_as_file(blob, filename);
}

function download_thread_as_json(thread)
{
	let filename = generate_file_name_from_thread(thread);
	let data = thread;
	export_and_download_data_as_blob(data, filename);
}

function generate_file_name_from_thread(thread, suffix = ".json")
{
	let first_line = thread.convo[0];
	let title = "chatgpt_thread" + suffix; 
	if(first_line) // just in case.
	{
		title = sliceString(first_line, AUTOGENERATED_FILENAME_MAX_LENGTH) + suffix;
	}
	return title;
}