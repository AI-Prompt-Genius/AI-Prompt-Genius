let title; let text; let tags; let category;
function addButtons() {
    let share_btn_html; let try_btn_html; let saveButton;
    setTimeout(() => {
        share_btn_html = getSaveButton()
        try_btn_html = getTryButton()
        let btn_span = `<div>${share_btn_html.outerHTML} &ensp; ${try_btn_html.outerHTML}</div>`
        let main_div;
        if (document.querySelector('#overlayScrollContainer')){
            let posts = document.querySelectorAll('.Post')
            main_div = posts[posts.length - 1].querySelector('table')
        }
        else{ // post loaded not in the reddit overlay
            main_div = document.querySelector('table')
        }
        title = main_div.querySelectorAll('th')[1].innerText
        let tds = main_div.querySelectorAll('td')
        text = tds[1].innerText
        category = tds[3].innerText
        //tags = tds[5].innerText
        tags = []
        main_div.insertAdjacentHTML("beforebegin", btn_span)
        saveButton = document.getElementById('save_prompt')
        saveButton.addEventListener('click', savePrompt)
        document.querySelector('#try_prompt').addEventListener('click', () => {tryPrompt(text)})
    }, 300)

    function tryPrompt(text){
        console.log(text)
        chrome.runtime.sendMessage({prompt: text, type: 'b_use_prompt'})
    }

    function savePrompt() {
        let dom_button = document.getElementById('save_prompt')
        dom_button.innerHTML = `Saved <icon class="icon icon-approve"></icon>`
        let prompt = {
            date: getDate(),
            time: getTime(),
            id: generateUUID(),
            title: title,
            text: text,
            tags: tags,
            category: category
        };
        chrome.storage.local.get({prompts: []}, function (result) {
            let prompts = result.prompts;
            prompts.push(prompt)
            chrome.storage.local.set({prompts: prompts});
        });
    }

    function getSaveButton() {
        let style = ` background: #0BA37F;  
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 5px`
        let button = document.createElement('button')
        button.innerHTML = `Save This Prompt <i class="fa-solid fa-download"></i>`
        button.setAttribute('style', style)
        button.setAttribute('id', 'save_prompt')
        return button
    }
    function getTryButton() {
        let style = ` background: #0BA37F;  
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 5px`
        let button = document.createElement('button')
        button.innerHTML = `Try This Prompt <i class="fa-solid fa-arrow-up-right-from-square"></i>`
        button.setAttribute('style', style)
        button.setAttribute('id', 'try_prompt')
        return button
    }
}

let url = window.location.href;
if (url.includes("comments")){
    setTimeout(addButtons, 500)
    addFontAwesomeIcons()
}

function addFontAwesomeIcons(){
    // this is not a big deal since it will already be cached by the browser from the other pages
    let link = `<link href="https://cdn.jsdelivr.net/gh/hung1001/font-awesome-pro-v6@44659d9/css/all.min.css" rel="stylesheet" type="text/css" />`
    document.head.insertAdjacentHTML("beforeend", link)
}

function checkURL() {
    if (url !== window.location.href) {
        url = window.location.href;
        if (url.includes("comments")){
            addFontAwesomeIcons()
            setTimeout(addButtons, 500)
        }
        console.log("URL CHANGE")
    }
}

setInterval(checkURL, 500);

function getDate() { // generated by ChatGPT
    var date = new Date();
    var options = {year: 'numeric', month: 'long', day: 'numeric'};
    return date.toLocaleString('default', options);
}

function getTime() { // generated by ChatGPT
    var currentDate = new Date();
    var options = {
        hour12: true,
        hour: "numeric",
        minute: "numeric"
    };
    var timeString = currentDate.toLocaleTimeString("default", options);
    return timeString
}

function generateUUID() { // generated by ChatGPT
    // create an array of possible characters for the UUID
    var possibleChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    // create an empty string that will be used to generate the UUID
    var uuid = "";

    // loop over the possible characters and append a random character to the UUID string
    for (var i = 0; i < 36; i++) {
        uuid += possibleChars.charAt(Math.floor(Math.random() * possibleChars.length));
    }

    // return the generated UUID
    return uuid;
}